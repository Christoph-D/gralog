/* possible commands
*select/deselect (all [vertices | edges] [ignored trash]) | <list id>
*
* filter <what> where|st|(such that)  <parameters> to <list identifier> [ignored trash]
*
*   where <what> := (all vertices) | (all edges)| selected | <list id>      // <list id> can be list of vertices or list of edges
*         <parameterS> := <parameterS> <parameterS> | <parameter> <value> | <bool_parameter>
*         <parameter> := no condition | fill|(fill color) | stroke|(stroke color) | color
	  	      	    	      | thickness | width | height | size | id | shape
*                                     | weight | type | (edge type)|edgeType
*                                     | degree | indegree | outdegree | butterfly?
*         <bool_parameter> := has selfloop | directed | has label

*
*   if <list id> already exists, new elements are added to the list
*
* delete <list id>
* union <list id> <list id> to <list id>
* intersection <list id> <list id> to <list id>
* difference <list id> <list id> to <list id>
* symmetric difference <list id> <list id> to <list id>
* complement <list id> to <list id>
* connect <list id> <list id> <formula> to <list id>
*     formula := <arithmetic expression with at most one variable i> =|>|>=|<|<= <arithmetic expression with one variable i>
*     <arithmetic expression with one variable i> must return a natural number and be built from
*     natural constants, i, +, *, /, %, ceil(.), floor(.), .^., root(.,.), exp(.,.)
* add <obj id>|selected to <list id>
* remove|delete <obj id>|selected from <list id>
* contract (edges <edge list id>)|selected
* contract edge <edge id>
* contract subgraph <vertex list id>
* butterfly contract <edge id>
* butterfly contract <edge list id>
* generarte <graph> [<generateParameterS>] to <list id>
*   <graph> := grid <n,m>| wheel <n> | cycle <n> | path <n> | clique <n> | torus <n,m> | complete tree <deg,depth>
*                        | cylindrical grid <n,m> | petersen | haus vom nikolaus | bull | butterfly | duerer |
*                        | erdos-renyi <n,p> | complete bipartite <n,m> | matching <n> | cube | 3-dim cube |
*                        | parallelepiped <n,m,k> | star <n>
*
* subdivide edge <edge id> <n times>
* subdivide <edge list id> <n times>
* */
