
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 19 13:06:55 CET 2015
//----------------------------------------------------

package gralog.modallogic.parser;

import java_cup.runtime.*;
import gralog.modallogic.formula.*;
import java.io.ByteArrayInputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 19 13:06:55 CET 2015
  */
public class ModalLogicParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ModalLogicParser() {super();}

  /** Constructor which sets the default scanner. */
  public ModalLogicParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ModalLogicParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\002\005\000\002\002\006\000\002\002\005\000" +
    "\002\002\006\000\002\003\003\000\002\003\005\000\002" +
    "\003\005\000\002\005\005\000\002\005\003\000\002\004" +
    "\005\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\020\004\004\006\012\010\010\011\007\014" +
    "\011\015\006\017\005\001\002\000\006\005\040\017\041" +
    "\001\002\000\012\002\001\012\001\013\001\016\001\001" +
    "\002\000\020\004\004\006\012\010\010\011\007\014\011" +
    "\015\006\017\005\001\002\000\012\002\ufffd\012\ufffd\013" +
    "\ufffd\016\ufffd\001\002\000\012\002\ufffe\012\ufffe\013\ufffe" +
    "\016\ufffe\001\002\000\020\004\004\006\012\010\010\011" +
    "\007\014\011\015\006\017\005\001\002\000\006\007\015" +
    "\017\016\001\002\000\004\002\014\001\002\000\004\002" +
    "\000\001\002\000\020\004\004\006\012\010\010\011\007" +
    "\014\011\015\006\017\005\001\002\000\004\007\017\001" +
    "\002\000\020\004\004\006\012\010\010\011\007\014\011" +
    "\015\006\017\005\001\002\000\012\002\ufff8\012\ufff8\013" +
    "\ufff8\016\ufff8\001\002\000\012\002\ufff9\012\ufff9\013\ufff9" +
    "\016\ufff9\001\002\000\012\002\ufffc\012\ufffc\013\ufffc\016" +
    "\ufffc\001\002\000\004\016\037\001\002\000\010\012\025" +
    "\013\026\016\ufff7\001\002\000\020\004\004\006\012\010" +
    "\010\011\007\014\011\015\006\017\005\001\002\000\020" +
    "\004\004\006\012\010\010\011\007\014\011\015\006\017" +
    "\005\001\002\000\006\013\031\016\ufff1\001\002\000\004" +
    "\016\ufff5\001\002\000\020\004\004\006\012\010\010\011" +
    "\007\014\011\015\006\017\005\001\002\000\004\016\ufff2" +
    "\001\002\000\006\012\035\016\ufff3\001\002\000\004\016" +
    "\ufff6\001\002\000\020\004\004\006\012\010\010\011\007" +
    "\014\011\015\006\017\005\001\002\000\004\016\ufff4\001" +
    "\002\000\012\002\uffff\012\uffff\013\uffff\016\uffff\001\002" +
    "\000\020\004\004\006\012\010\010\011\007\014\011\015" +
    "\006\017\005\001\002\000\004\005\042\001\002\000\020" +
    "\004\004\006\012\010\010\011\007\014\011\015\006\017" +
    "\005\001\002\000\012\002\ufffa\012\ufffa\013\ufffa\016\ufffa" +
    "\001\002\000\012\002\ufffb\012\ufffb\013\ufffb\016\ufffb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\004\002\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\023\003\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\020\001\001\000\002\001\001\000\004\002\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\032\005" +
    "\033\001\001\000\006\002\026\004\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\026\004\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\032\005\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\043\001\001\000\002\001\001" +
    "\000\004\002\042\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ModalLogicParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ModalLogicParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ModalLogicParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    String errorMsg = null;

    public Boolean hasError()
    {
        return errorMsg == null;
    }
    
    public String getErrorMsg()
    {
        if(errorMsg == null)
            return "no error";
        else
            return errorMsg;
    }
    
    public void syntax_error(Symbol cur_token)
    {
        if(errorMsg == null)
            errorMsg = "Syntax Error: " + cur_token.toString();
    }

    public void report_fatal_error(String message, Object info) throws Exception
    {
        throw new Exception("Fatal parsing error: " + message + "\n" + info.toString());
    }

    public ModalLogicFormula parseString(String str) throws Exception
    {
        String charset = "UTF8";
        byte[] bytes = str.getBytes(charset);
        ByteArrayInputStream stringstream = new ByteArrayInputStream(bytes);
                
        DefaultSymbolFactory symbolfactory = new DefaultSymbolFactory();
        ModalLogicScanner scanner = new ModalLogicScanner(stringstream, symbolfactory);
        this.setScanner(scanner);
        
        Symbol parserresult = this.parse();
        return (ModalLogicFormula) parserresult.value;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ModalLogicParser$actions {
  private final ModalLogicParser parser;

  /** Constructor */
  CUP$ModalLogicParser$actions(ModalLogicParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ModalLogicParser$do_action(
    int                        CUP$ModalLogicParser$act_num,
    java_cup.runtime.lr_parser CUP$ModalLogicParser$parser,
    java.util.Stack            CUP$ModalLogicParser$stack,
    int                        CUP$ModalLogicParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ModalLogicParser$result;

      /* select the action based on the action number */
      switch (CUP$ModalLogicParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // veelist ::= formula 
            {
              ModalLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("veelist",2, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // veelist ::= formula VEE veelist 
            {
              ModalLogicFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).right;
		ModalLogicFormula left = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula right = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicOr(left, right); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("veelist",2, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // wedgelist ::= formula 
            {
              ModalLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("wedgelist",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // wedgelist ::= formula WEDGE wedgelist 
            {
              ModalLogicFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).right;
		ModalLogicFormula left = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula right = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicAnd(left, right); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("wedgelist",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // booleanlist ::= formula VEE veelist 
            {
              ModalLogicFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).right;
		ModalLogicFormula left = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula right = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicOr(left, right); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("booleanlist",1, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // booleanlist ::= formula WEDGE wedgelist 
            {
              ModalLogicFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).right;
		ModalLogicFormula left = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula right = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicAnd(left, right); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("booleanlist",1, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // booleanlist ::= formula 
            {
              ModalLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("booleanlist",1, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formula ::= BRACKETLEFT STRING BRACKETRIGHT formula 
            {
              ModalLogicFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicBox(s, f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-3)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formula ::= BRACKETLEFT BRACKETRIGHT formula 
            {
              ModalLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicBox(f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formula ::= LT STRING GT formula 
            {
              ModalLogicFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicDiamond(s, f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-3)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formula ::= LT GT formula 
            {
              ModalLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicDiamond(f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formula ::= NEG formula 
            {
              ModalLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicNot(f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formula ::= TOP 
            {
              ModalLogicFormula RESULT =null;
		 RESULT = new ModalLogicTop(); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula ::= BOT 
            {
              ModalLogicFormula RESULT =null;
		 RESULT = new ModalLogicBottom(); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula ::= PARENTHESISLEFT booleanlist PARENTHESISRIGHT 
            {
              ModalLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).right;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).value;
		 RESULT = f; 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= formula EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).right;
		ModalLogicFormula start_val = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).value;
		RESULT = start_val;
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ModalLogicParser$parser.done_parsing();
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // formula ::= STRING 
            {
              ModalLogicFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicProposition(s); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

