
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jul 12 13:45:29 CEST 2016
//----------------------------------------------------

package gralog.modalmucalculus.parser;

import java_cup.runtime.*;
import gralog.modalmucalculus.formula.*;
import java.io.ByteArrayInputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jul 12 13:45:29 CEST 2016
  */
public class ModalMuCalculusParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ModalMuCalculusParser() {super();}

  /** Constructor which sets the default scanner. */
  public ModalMuCalculusParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ModalMuCalculusParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\005\000\002\005\006\000\002" +
    "\005\005\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\024\004\017\006\004\011\012\012\006\013" +
    "\007\014\010\017\016\020\020\022\011\001\002\000\006" +
    "\007\044\022\045\001\002\000\010\002\ufffe\016\042\021" +
    "\ufffe\001\002\000\004\022\037\001\002\000\012\002\ufffb" +
    "\015\ufffb\016\ufffb\021\ufffb\001\002\000\012\002\ufffa\015" +
    "\ufffa\016\ufffa\021\ufffa\001\002\000\012\002\ufff8\015\ufff8" +
    "\016\ufff8\021\ufff8\001\002\000\004\022\034\001\002\000" +
    "\006\002\001\021\001\001\002\000\004\002\033\001\002" +
    "\000\012\002\ufffc\015\031\016\ufffc\021\ufffc\001\002\000" +
    "\024\004\017\006\004\011\012\012\006\013\007\014\010" +
    "\017\016\020\020\022\011\001\002\000\006\005\024\022" +
    "\023\001\002\000\024\004\017\006\004\011\012\012\006" +
    "\013\007\014\010\017\016\020\020\022\011\001\002\000" +
    "\004\021\022\001\002\000\012\002\ufff1\015\ufff1\016\ufff1" +
    "\021\ufff1\001\002\000\004\005\026\001\002\000\024\004" +
    "\017\006\004\011\012\012\006\013\007\014\010\017\016" +
    "\020\020\022\011\001\002\000\012\002\ufff7\015\ufff7\016" +
    "\ufff7\021\ufff7\001\002\000\024\004\017\006\004\011\012" +
    "\012\006\013\007\014\010\017\016\020\020\022\011\001" +
    "\002\000\012\002\ufff6\015\ufff6\016\ufff6\021\ufff6\001\002" +
    "\000\012\002\ufff9\015\ufff9\016\ufff9\021\ufff9\001\002\000" +
    "\024\004\017\006\004\011\012\012\006\013\007\014\010" +
    "\017\016\020\020\022\011\001\002\000\010\002\ufffd\016" +
    "\ufffd\021\ufffd\001\002\000\004\002\000\001\002\000\004" +
    "\010\035\001\002\000\024\004\017\006\004\011\012\012" +
    "\006\013\007\014\010\017\016\020\020\022\011\001\002" +
    "\000\012\002\ufff3\015\ufff3\016\ufff3\021\ufff3\001\002\000" +
    "\004\010\040\001\002\000\024\004\017\006\004\011\012" +
    "\012\006\013\007\014\010\017\016\020\020\022\011\001" +
    "\002\000\012\002\ufff2\015\ufff2\016\ufff2\021\ufff2\001\002" +
    "\000\024\004\017\006\004\011\012\012\006\013\007\014" +
    "\010\017\016\020\020\022\011\001\002\000\006\002\uffff" +
    "\021\uffff\001\002\000\024\004\017\006\004\011\012\012" +
    "\006\013\007\014\010\017\016\020\020\022\011\001\002" +
    "\000\004\007\046\001\002\000\024\004\017\006\004\011" +
    "\012\012\006\013\007\014\010\017\016\020\020\022\011" +
    "\001\002\000\012\002\ufff4\015\ufff4\016\ufff4\021\ufff4\001" +
    "\002\000\012\002\ufff5\015\ufff5\016\ufff5\021\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\012\002\013\003\012\004\004\005\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\027\001\001\000\002\001\001\000" +
    "\012\002\020\003\012\004\004\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\024\001\001\000\002\001\001\000\004\005\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\031\005" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\040\001\001\000\002\001\001" +
    "\000\010\003\042\004\004\005\014\001\001\000\002\001" +
    "\001\000\004\005\047\001\001\000\002\001\001\000\004" +
    "\005\046\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ModalMuCalculusParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ModalMuCalculusParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ModalMuCalculusParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    String errorMsg = null;

    public Boolean hasError()
    {
        return errorMsg == null;
    }
    
    public String getErrorMsg()
    {
        if(errorMsg == null)
            return "no error";
        else
            return errorMsg;
    }
    
    public void syntax_error(Symbol cur_token)
    {
        if(errorMsg == null)
            errorMsg = "Syntax Error: " + cur_token.toString();
    }

    public void report_fatal_error(String message, Object info) throws Exception
    {
        throw new Exception("Fatal parsing error: " + message + "\n" + info.toString());
    }

    public ModalMuCalculusFormula parseString(String str) throws Exception
    {
        String charset = "UTF8";
        byte[] bytes = str.getBytes(charset);
        ByteArrayInputStream stringstream = new ByteArrayInputStream(bytes);
                
        DefaultSymbolFactory symbolfactory = new DefaultSymbolFactory();
        ModalMuCalculusScanner scanner = new ModalMuCalculusScanner(stringstream, symbolfactory);
        this.setScanner(scanner);
        
        Symbol parserresult = this.parse();
        return (ModalMuCalculusFormula) parserresult.value;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ModalMuCalculusParser$actions {
  private final ModalMuCalculusParser parser;

  /** Constructor */
  CUP$ModalMuCalculusParser$actions(ModalMuCalculusParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ModalMuCalculusParser$do_action(
    int                        CUP$ModalMuCalculusParser$act_num,
    java_cup.runtime.lr_parser CUP$ModalMuCalculusParser$parser,
    java.util.Stack            CUP$ModalMuCalculusParser$stack,
    int                        CUP$ModalMuCalculusParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ModalMuCalculusParser$result;

      /* select the action based on the action number */
      switch (CUP$ModalMuCalculusParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atomicformula ::= PARENTHESISLEFT formula PARENTHESISRIGHT 
            {
              ModalMuCalculusFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-1)).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-1)).value;
		 RESULT = f; 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atomicformula ::= NU STRING DOT atomicformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusGreatestFixedPoint(s,f); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-3)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atomicformula ::= MU STRING DOT atomicformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusLeastFixedPoint(s,f); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-3)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atomicformula ::= BRACKETLEFT STRING BRACKETRIGHT atomicformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusBox(s, f); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-3)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atomicformula ::= BRACKETLEFT BRACKETRIGHT atomicformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusBox(f); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atomicformula ::= LT STRING GT atomicformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusDiamond(s, f); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-3)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atomicformula ::= LT GT atomicformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusDiamond(f); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atomicformula ::= STRING 
            {
              ModalMuCalculusFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusProposition(s); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atomicformula ::= NEG atomicformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusNot(f); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-1)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atomicformula ::= TOP 
            {
              ModalMuCalculusFormula RESULT =null;
		 RESULT = new ModalMuCalculusTop(); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atomicformula ::= BOT 
            {
              ModalMuCalculusFormula RESULT =null;
		 RESULT = new ModalMuCalculusBottom(); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wedgeformula ::= atomicformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("wedgeformula",2, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wedgeformula ::= atomicformula WEDGE wedgeformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).right;
		ModalMuCalculusFormula left = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula right = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusAnd(left, right); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("wedgeformula",2, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // veeformula ::= wedgeformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("veeformula",1, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // veeformula ::= wedgeformula VEE veeformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).right;
		ModalMuCalculusFormula left = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula right = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = new ModalMuCalculusOr(left, right); 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("veeformula",1, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= formula EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-1)).right;
		ModalMuCalculusFormula start_val = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-1)).value;
		RESULT = start_val;
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.elementAt(CUP$ModalMuCalculusParser$top-1)), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ModalMuCalculusParser$parser.done_parsing();
          return CUP$ModalMuCalculusParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // formula ::= veeformula 
            {
              ModalMuCalculusFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()).right;
		ModalMuCalculusFormula f = (ModalMuCalculusFormula)((java_cup.runtime.Symbol) CUP$ModalMuCalculusParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalMuCalculusParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalMuCalculusParser$stack.peek()), RESULT);
            }
          return CUP$ModalMuCalculusParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

