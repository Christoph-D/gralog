{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red85\green142\blue40;}
{\*\expandedcolortbl;;\csgenericrgb\c33333\c55686\c15686;}
\margl1440\margr1440\margb1134\margt1417\vieww19460\viewh16580\viewkind1
\deftab720
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0

\f0\fs28 \cf0 \
- Toolbar classes and extensions\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0
\cf2 - Mouse input selection improvements\
	\'95 Improve functionality for trackpad users/mice without wheel\
	\'95 Possibly alternate keys (e.g. control), other event trackers\cf0 \
\cf2 - Box selection with filter\cf0 \
- List all selection in panel, possible to filter selection by type (or deselect groups)\
\cf2 - Graph editing without unnecessary context switching\cf0 \
- Saving dialog\
- open graph canvas on start\
- option to enable startup dialog to select project or start new one\
- no axis on canvas\
- variable grid size\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
- triangle\
- optional snapping\
- free edges / invisible nodes\
- font size of labels\
- rotate text in labels (if not too difficult)\
- show entire graph\
- preferences\
- background\
- align nodes\
\cf2 - (un)select all = cmd+A\cf0 \
- filter properties when many elements are selected\
- help lines when aligning wo auto aligning\
- graph statistics\
\'a0- # nodes\
\'a0- # edges\
\'a0- density (# edges / # nodes)\
\'a0- # self loops\
\'a0- # multiedges\
- tool tips\
- help\
- 3 context menus (vertex, edge, both, empty)\
- helper window for current key mapping \
\kerning1\expnd0\expndtw0 - optimize graph drawing (maybe partially update rendered structure)\
	- ask user if they want a reduced visual representation of the graph\
- move canvas on selection draw out of bounds\
- visualize tree decompositions (and bags, unions etc)\
\
DRAWING\
- for 1st curve control point use parabola\
- for 2nd\
- Collapse bezier points\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0
\cf0 FRAME\
- show selected part graph in a separate window\
\
KEYS\
- keyboard hotkeys (translation, deletion, renaming, zoom)\
- menu keys (cmd+o/s/e/t, cmd+shift+s, \cf2 cmd+c/x/v,\cf0  )\
- tab buttons (add tab/)\
- changeable tab order\
- shift/cmd select vertices/edges- Ctrl-Z undo\
- find node by name\
\
INSPECTOR\
- color code structures in tabs\
- persistent variables in inspector\
- short letters l/d/t/etc\'85 to send cursor to setting\
(press l -> type\'85 -> submit)\
- editable tab name in interface\
\
CONSOLE\
- functional commands:\
	- findv v -> v.id == 2\
	- findv v,w,x -> v.id == w.id + 1 & w.id == x.id\
	- filter <lambda>\
	- replace <var> by <var>\
	- replace <vertex> by <var>\
	- mult //lexicographic\
	- subdivide <edge> <number>\
	- contract <edge>\
	- contract <var> <var>\
	- connect <var> <var>\
\
\
VERTICES\
- select node shape for directed graphs\
	- square, ellipsis, rectangle, rhomboid, rounded corners\
	- bezier edges\
- optional label scale\
- adjustable node size\
- add color palette\
- show warning when vertices overlap\
- overload size depending on structure class\
- drag out-in to draw self loop\
\
EDGES\
- thickness and type (dashed, dotted, both, plain)\
- arrow tip type (triangle, concave, filled, empty)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0
\cf2 - loops as circles\cf0 \
\cf2 - multi-edges\
- option to collapse edges and back (more than 4 edges looks ugly)\
- draw edge with right mouse key drag \cf0 \
- open context with right click\
\
GRAPH LAYOUTS\
- for edge creation with lots of multiedges, automatically bend/adjust/align\
edges to visual \
\
PIPELINE\
- gralog.print()\
- gralog.setProgressBar()\
- allow external program to display persistent variables\
(that don\'92t scroll like terminal outputs)\
- print python outputs\
- catch native stderr python\
- create integrated python console\
- allow python to send requests and allow gralog\
to return different datatypes (int, boolean, vertex etc)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\'97from Felix and roman\'92s conversation on Friday morning:\
-Edge id\'92s\
-Edges betwixt nodes(a,b)\
\strike \strikec0 -Debug: 	g.setVertexStrokeColor(x,"#ff0000");\strike0\striked0 \
\strike \strikec0 -Named colours\strike0\striked0 \
-Delete edge debug\
-Set edge contour\
-Set vertex shape\
-Implement buttons\
-
\b Ask Gralog for node/edge/set of nodes/edges/userInput(bool/int/positive/string/array) input with type testing\
-
\b0 terminating symbol for Gralog messages\
\strike \strikec0 -Tracking variables \strike0\striked0 A version is available, it is not perfect\
-Pause on different key events/clicks/etc.\
-Different pause sizes (small, medium, large)\
-Gralog show that is waiting\
-Network x interface for terminal \
\strike \strikec0 -Change name of getConnectedNeighbours to getNeighbours\strike0\striked0 \
\strike \strikec0 -Add inNeighbours\strike0\striked0 \
\strike \strikec0 -getConnectedEdges -> getIncidentEdges\strike0\striked0 \
\strike \strikec0 -inEdges \strike0\striked0 \
-getEndPoints(EdgeID)\
\strike \strikec0 -getAllNodes()\strike0\striked0 \
\strike \strikec0 -getAllEdges()\strike0\striked0 \
-getRandomVertex()\
-getRandomEdge()\
\strike \strikec0 -getNeighbouringEdges -> getAdjacentEdges\strike0\striked0 \
-Possible: outgoingEdges -> outEdges\
\strike \strikec0 -addDirectedEdge\strike0\striked0 \
-deleteEdge(EdgeId)\
-deleteAllEdges(sourceId,targetId)\
\strike \strikec0 -addEdgeLabel/vertexLabel -> setEdgeLabel/vertexLabel\strike0\striked0 \
-Terminate program on user command\
-Send improper termination errors to Gralog as well (such as set fault, syntax error, etc.)\
\strike \strikec0 -Keine acks :\'92( \strike0\striked0 \
-sendGraph, \strike \strikec0 receiveGraph\strike0\striked0 \
-Debug mode lineumber###command\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0
\cf0 \'97\
underlying question: right now, it is such that there is only one piping instance, it belongs to the main window. a piping instance can own multiple graphs. if you start a new piping program, the old gets lost regardless of whether it is finished. Is this appropriate? there is also only one pipeline control panel, that belongs to the pipeline Instance\
\
\
UI WINDOWS\
- algorithm progressbar\
- algorithm output console\
- scroll through tabs with scrollbar\
- piping window height and stuff\
\
FUTURE\
- hierarchical representation\
	- edges between supernodes(define semantic)\
	- \
- hypergraphs\
\
OTHER\
- logo\
- UI skin\
- find conference to present glares\
- money\
\
Backlog:\
- Classes aren\'92t properly read (ClassNotFoundException or similar)\
- MouseEvent inputs trigger in wrong order\
- create terminal}