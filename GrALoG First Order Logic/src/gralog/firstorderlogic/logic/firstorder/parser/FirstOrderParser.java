
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 03 16:09:46 CET 2016
//----------------------------------------------------

package gralog.firstorderlogic.logic.firstorder.parser;

import java_cup.runtime.*;
import gralog.firstorderlogic.logic.firstorder.formula.*;
import java.io.ByteArrayInputStream;
import java.util.Vector;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 03 16:09:46 CET 2016
  */
public class FirstOrderParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FirstOrderParser() {super();}

  /** Constructor which sets the default scanner. */
  public FirstOrderParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FirstOrderParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\005\000\002\004\006\000\002\003\004\000" +
    "\002\003\006\000\002\003\005\000\002\003\006\000\002" +
    "\003\005\000\002\005\003\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\014\004\012\006\011\011\006\012\010\015" +
    "\005\001\002\000\006\002\001\005\001\001\002\000\004" +
    "\004\036\001\002\000\004\015\032\001\002\000\012\002" +
    "\uffff\005\uffff\007\021\010\022\001\002\000\004\015\026" +
    "\001\002\000\014\004\012\006\011\011\006\012\010\015" +
    "\005\001\002\000\014\004\012\006\011\011\006\012\010" +
    "\015\005\001\002\000\004\002\014\001\002\000\004\002" +
    "\000\001\002\000\004\005\016\001\002\000\012\002\ufffb" +
    "\005\ufffb\007\ufffb\010\ufffb\001\002\000\006\002\ufff9\005" +
    "\ufff9\001\002\000\012\002\ufffc\005\ufffc\007\ufffc\010\ufffc" +
    "\001\002\000\010\004\012\006\024\015\005\001\002\000" +
    "\010\004\012\006\024\015\005\001\002\000\012\002\ufffe" +
    "\005\ufffe\007\021\010\ufffe\001\002\000\010\004\012\006" +
    "\024\015\005\001\002\000\012\002\ufffd\005\ufffd\007\ufffd" +
    "\010\ufffd\001\002\000\016\004\012\006\011\011\006\012" +
    "\010\014\027\015\005\001\002\000\014\004\012\006\011" +
    "\011\006\012\010\015\005\001\002\000\006\002\ufff5\005" +
    "\ufff5\001\002\000\006\002\ufff6\005\ufff6\001\002\000\016" +
    "\004\012\006\011\011\006\012\010\014\034\015\005\001" +
    "\002\000\006\002\ufff7\005\ufff7\001\002\000\014\004\012" +
    "\006\011\011\006\012\010\015\005\001\002\000\006\002" +
    "\ufff8\005\ufff8\001\002\000\004\015\037\001\002\000\006" +
    "\005\ufff4\013\ufff4\001\002\000\006\005\042\013\041\001" +
    "\002\000\004\015\043\001\002\000\012\002\ufffa\005\ufffa" +
    "\007\ufffa\010\ufffa\001\002\000\006\005\ufff3\013\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\010\002\012\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\016\004\017\001" +
    "\001\000\010\002\014\003\003\004\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\024" +
    "\001\001\000\004\004\022\001\001\000\002\001\001\000" +
    "\004\004\017\001\001\000\002\001\001\000\010\002\027" +
    "\003\003\004\006\001\001\000\010\002\030\003\003\004" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\032\003\003\004\006\001\001\000\002\001\001\000" +
    "\010\002\034\003\003\004\006\001\001\000\002\001\001" +
    "\000\004\005\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FirstOrderParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FirstOrderParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FirstOrderParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    String errorMsg = null;

    public Boolean hasError()
    {
        return errorMsg == null;
    }
    
    public String getErrorMsg()
    {
        if(errorMsg == null)
            return "no error";
        else
            return errorMsg;
    }
    
    public void syntax_error(Symbol cur_token)
    {
        if(errorMsg == null)
            errorMsg = "Syntax Error: " + cur_token.toString();
    }

    public void report_fatal_error(String message, Object info) throws Exception
    {
        throw new Exception("Fatal parsing error: " + message + "\n" + info.toString());
    }

    public FirstOrderFormula parseString(String str) throws Exception
    {
        String charset = "UTF8";
        byte[] bytes = str.getBytes(charset);
        ByteArrayInputStream stringstream = new ByteArrayInputStream(bytes);
                
        DefaultSymbolFactory symbolfactory = new DefaultSymbolFactory();
        FirstOrderScanner scanner = new FirstOrderScanner(stringstream, symbolfactory);
        this.setScanner(scanner);
        
        Symbol parserresult = this.parse();
        return (FirstOrderFormula) parserresult.value;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FirstOrderParser$actions {
  private final FirstOrderParser parser;

  /** Constructor */
  CUP$FirstOrderParser$actions(FirstOrderParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FirstOrderParser$do_action(
    int                        CUP$FirstOrderParser$act_num,
    java_cup.runtime.lr_parser CUP$FirstOrderParser$parser,
    java.util.Stack            CUP$FirstOrderParser$stack,
    int                        CUP$FirstOrderParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FirstOrderParser$result;

      /* select the action based on the action number */
      switch (CUP$FirstOrderParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= parameters COMMA STRING 
            {
              Vector<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).right;
		Vector<String> params = (Vector<String>)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = params; RESULT.add(s); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("parameters",3, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= STRING 
            {
              Vector<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new Vector<String>(); RESULT.add(s); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("parameters",3, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // quantifiedformula ::= FORALL STRING formula 
            {
              FirstOrderFormula RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new FirstOrderForall(var, f); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("quantifiedformula",1, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // quantifiedformula ::= FORALL STRING DOT formula 
            {
              FirstOrderFormula RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new FirstOrderForall(var, f); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("quantifiedformula",1, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-3)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // quantifiedformula ::= EXISTS STRING formula 
            {
              FirstOrderFormula RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new FirstOrderExists(var, f); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("quantifiedformula",1, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // quantifiedformula ::= EXISTS STRING DOT formula 
            {
              FirstOrderFormula RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new FirstOrderExists(var, f); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("quantifiedformula",1, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-3)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // quantifiedformula ::= NEG quantifiedformula 
            {
              FirstOrderFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new FirstOrderNot(f); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("quantifiedformula",1, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // basicformula ::= STRING OPEN parameters CLOSE 
            {
              FirstOrderFormula RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-3)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-3)).right;
		String rel = (String)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).right;
		Vector<String> params = (Vector<String>)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).value;
		 RESULT = new FirstOrderRelation(rel, params); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("basicformula",2, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-3)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // basicformula ::= OPEN formula CLOSE 
            {
              FirstOrderFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).value;
		 RESULT = f; 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("basicformula",2, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // basicformula ::= NEG basicformula 
            {
              FirstOrderFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new FirstOrderNot(f); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("basicformula",2, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // basicformula ::= basicformula AND basicformula 
            {
              FirstOrderFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).right;
		FirstOrderFormula left = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula right = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new FirstOrderAnd(left, right); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("basicformula",2, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // basicformula ::= basicformula OR basicformula 
            {
              FirstOrderFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).right;
		FirstOrderFormula left = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula right = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = new FirstOrderOr(left, right); 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("basicformula",2, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-2)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula ::= basicformula 
            {
              FirstOrderFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= formula EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).right;
		FirstOrderFormula start_val = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)).value;
		RESULT = start_val;
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.elementAt(CUP$FirstOrderParser$top-1)), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FirstOrderParser$parser.done_parsing();
          return CUP$FirstOrderParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // formula ::= quantifiedformula 
            {
              FirstOrderFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()).right;
		FirstOrderFormula f = (FirstOrderFormula)((java_cup.runtime.Symbol) CUP$FirstOrderParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FirstOrderParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FirstOrderParser$stack.peek()), RESULT);
            }
          return CUP$FirstOrderParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

