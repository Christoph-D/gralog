
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 15 14:36:05 CEST 2016
//----------------------------------------------------

package gralog.computationtreelogic.parser;

import java_cup.runtime.*;
import gralog.computationtreelogic.formula.*;
import java.io.ByteArrayInputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 15 14:36:05 CEST 2016
  */
public class ComputationTreeLogicParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ComputationTreeLogicParser() {super();}

  /** Constructor which sets the default scanner. */
  public ComputationTreeLogicParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ComputationTreeLogicParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\005\000\002\005\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\006\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\020\004\004\005\011\012\006\013\007\016" +
    "\015\017\016\021\010\001\002\000\026\004\004\005\011" +
    "\006\041\007\040\010\043\012\006\013\007\016\015\017" +
    "\016\021\010\001\002\000\010\002\ufffe\015\036\020\ufffe" +
    "\001\002\000\014\002\ufffa\011\ufffa\014\ufffa\015\ufffa\020" +
    "\ufffa\001\002\000\014\002\ufff9\011\ufff9\014\ufff9\015\ufff9" +
    "\020\ufff9\001\002\000\014\002\ufffb\011\ufffb\014\ufffb\015" +
    "\ufffb\020\ufffb\001\002\000\026\004\004\005\011\006\026" +
    "\007\025\010\030\012\006\013\007\016\015\017\016\021" +
    "\010\001\002\000\006\002\001\020\001\001\002\000\004" +
    "\002\024\001\002\000\012\002\ufffc\014\022\015\ufffc\020" +
    "\ufffc\001\002\000\020\004\004\005\011\012\006\013\007" +
    "\016\015\017\016\021\010\001\002\000\020\004\004\005" +
    "\011\012\006\013\007\016\015\017\016\021\010\001\002" +
    "\000\004\020\020\001\002\000\014\002\ufff8\011\ufff8\014" +
    "\ufff8\015\ufff8\020\ufff8\001\002\000\014\002\ufff7\011\ufff7" +
    "\014\ufff7\015\ufff7\020\ufff7\001\002\000\020\004\004\005" +
    "\011\012\006\013\007\016\015\017\016\021\010\001\002" +
    "\000\010\002\ufffd\015\ufffd\020\ufffd\001\002\000\004\002" +
    "\000\001\002\000\020\004\004\005\011\012\006\013\007" +
    "\016\015\017\016\021\010\001\002\000\020\004\004\005" +
    "\011\012\006\013\007\016\015\017\016\021\010\001\002" +
    "\000\004\011\032\001\002\000\020\004\004\005\011\012" +
    "\006\013\007\016\015\017\016\021\010\001\002\000\014" +
    "\002\ufff0\011\ufff0\014\ufff0\015\ufff0\020\ufff0\001\002\000" +
    "\020\004\004\005\011\012\006\013\007\016\015\017\016" +
    "\021\010\001\002\000\014\002\uffef\011\uffef\014\uffef\015" +
    "\uffef\020\uffef\001\002\000\014\002\ufff2\011\ufff2\014\ufff2" +
    "\015\ufff2\020\ufff2\001\002\000\014\002\ufff1\011\ufff1\014" +
    "\ufff1\015\ufff1\020\ufff1\001\002\000\020\004\004\005\011" +
    "\012\006\013\007\016\015\017\016\021\010\001\002\000" +
    "\006\002\uffff\020\uffff\001\002\000\020\004\004\005\011" +
    "\012\006\013\007\016\015\017\016\021\010\001\002\000" +
    "\020\004\004\005\011\012\006\013\007\016\015\017\016" +
    "\021\010\001\002\000\004\011\045\001\002\000\020\004" +
    "\004\005\011\012\006\013\007\016\015\017\016\021\010" +
    "\001\002\000\014\002\ufff4\011\ufff4\014\ufff4\015\ufff4\020" +
    "\ufff4\001\002\000\020\004\004\005\011\012\006\013\007" +
    "\016\015\017\016\021\010\001\002\000\014\002\ufff3\011" +
    "\ufff3\014\ufff3\015\ufff3\020\ufff3\001\002\000\014\002\ufff6" +
    "\011\ufff6\014\ufff6\015\ufff6\020\ufff6\001\002\000\014\002" +
    "\ufff5\011\ufff5\014\ufff5\015\ufff5\020\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\012\002\012\003\013\004\011\005\004\001" +
    "\001\000\004\003\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\020\001\001\000\012\002\016\003" +
    "\013\004\011\005\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\013\005\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\034" +
    "\001\001\000\004\003\033\001\001\000\002\001\001\000" +
    "\004\003\030\001\001\000\002\001\001\000\004\003\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\013\004\036\005\004\001\001\000\002" +
    "\001\001\000\004\003\047\001\001\000\004\003\046\001" +
    "\001\000\002\001\001\000\004\003\043\001\001\000\002" +
    "\001\001\000\004\003\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ComputationTreeLogicParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ComputationTreeLogicParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ComputationTreeLogicParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    String errorMsg = null;

    public Boolean hasError()
    {
        return errorMsg == null;
    }
    
    public String getErrorMsg()
    {
        if(errorMsg == null)
            return "no error";
        else
            return errorMsg;
    }
    
    public void syntax_error(Symbol cur_token)
    {
        if(errorMsg == null)
            errorMsg = "Syntax Error: " + cur_token.toString();
    }

    public void report_fatal_error(String message, Object info) throws Exception
    {
        throw new Exception("Fatal parsing error: " + message + "\n" + info.toString());
    }

    public ComputationTreeLogicFormula parseString(String str) throws Exception
    {
        String charset = "UTF8";
        byte[] bytes = str.getBytes(charset);
        ByteArrayInputStream stringstream = new ByteArrayInputStream(bytes);
                
        DefaultSymbolFactory symbolfactory = new DefaultSymbolFactory();
        ComputationTreeLogicScanner scanner = new ComputationTreeLogicScanner(stringstream, symbolfactory);
        this.setScanner(scanner);
        
        Symbol parserresult = this.parse();
        return (ComputationTreeLogicFormula) parserresult.value;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ComputationTreeLogicParser$actions {
  private final ComputationTreeLogicParser parser;

  /** Constructor */
  CUP$ComputationTreeLogicParser$actions(ComputationTreeLogicParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ComputationTreeLogicParser$do_action(
    int                        CUP$ComputationTreeLogicParser$act_num,
    java_cup.runtime.lr_parser CUP$ComputationTreeLogicParser$parser,
    java.util.Stack            CUP$ComputationTreeLogicParser$stack,
    int                        CUP$ComputationTreeLogicParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ComputationTreeLogicParser$result;

      /* select the action based on the action number */
      switch (CUP$ComputationTreeLogicParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atomicformula ::= EXISTS atomicformula UNTIL atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).right;
		ComputationTreeLogicFormula f1 = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f2 = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicExistsUntil(f1,f2); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-3)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atomicformula ::= EXISTS FINALLY atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicExistsFinally(f); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atomicformula ::= EXISTS GLOBALLY atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicExistsGlobally(f); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atomicformula ::= EXISTS NEXT atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicExistsNext(f); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atomicformula ::= ALWAYS atomicformula UNTIL atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).right;
		ComputationTreeLogicFormula f1 = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f2 = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicAlwaysUntil(f1,f2); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-3)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atomicformula ::= ALWAYS FINALLY atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicAlwaysFinally(f); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atomicformula ::= ALWAYS GLOBALLY atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicAlwaysGlobally(f); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atomicformula ::= ALWAYS NEXT atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicAlwaysNext(f); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atomicformula ::= NEG atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicNot(f); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-1)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atomicformula ::= PARENTHESISLEFT formula PARENTHESISRIGHT 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-1)).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-1)).value;
		 RESULT = f; 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atomicformula ::= TOP 
            {
              ComputationTreeLogicFormula RESULT =null;
		 RESULT = new ComputationTreeLogicTop(); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atomicformula ::= BOT 
            {
              ComputationTreeLogicFormula RESULT =null;
		 RESULT = new ComputationTreeLogicBottom(); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atomicformula ::= STRING 
            {
              ComputationTreeLogicFormula RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicProposition(s); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",1, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wedgeformula ::= atomicformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("wedgeformula",3, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wedgeformula ::= atomicformula WEDGE wedgeformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).right;
		ComputationTreeLogicFormula left = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula right = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicAnd(left, right); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("wedgeformula",3, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // veeformula ::= wedgeformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("veeformula",2, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // veeformula ::= wedgeformula VEE veeformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).right;
		ComputationTreeLogicFormula left = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula right = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = new ComputationTreeLogicOr(left, right); 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("veeformula",2, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= formula EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-1)).right;
		ComputationTreeLogicFormula start_val = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-1)).value;
		RESULT = start_val;
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.elementAt(CUP$ComputationTreeLogicParser$top-1)), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ComputationTreeLogicParser$parser.done_parsing();
          return CUP$ComputationTreeLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // formula ::= veeformula 
            {
              ComputationTreeLogicFormula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()).right;
		ComputationTreeLogicFormula f = (ComputationTreeLogicFormula)((java_cup.runtime.Symbol) CUP$ComputationTreeLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ComputationTreeLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ComputationTreeLogicParser$stack.peek()), RESULT);
            }
          return CUP$ComputationTreeLogicParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

