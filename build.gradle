defaultTasks 'run'

allprojects {
  repositories {
    mavenCentral()
  }
  apply plugin: 'java'

  // Dependencies marked as "gralog" are considered to be internal and
  // will not be explicitly required (via classpath or linking) by the
  // jar files of the subprojects.  Every dependency must be properly
  // provided (via "compile") by exactly one project (usually
  // "gralog-fx").
  configurations {
    gralog
    compile.extendsFrom gralog
  }

  configurations {
    javaCup
    jflex
  }
  dependencies {
    javaCup 'com.github.vbmacher:java-cup:11b-20160615'
    jflex 'de.jflex:jflex:1.6.1'
  }
  ant.taskdef(classname: 'java_cup.anttask.CUPTask', name: 'cup', classpath: configurations.javaCup.asPath)
  ant.taskdef(classname: 'jflex.anttask.JFlexTask', name: 'flex', classpath: configurations.jflex.asPath)

  dependencies {
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
  }
}

project(':gralog-fx') {
  dependencies {
    compile project(':gralog-core')
    compile project(':gralog-finite-game')
  }
  jar {
    baseName = 'gralog-fx'
    manifest {
      attributes 'Main-Class': 'gralog.gralogfx.MainWindow'
    }
    from {
        configurations.runtime.collect {
          it.isDirectory() ? it : zipTree(it)
      }
    }
  }
}

// Configure the dependencies of the individual subprojects.

project(':gralog-automaton') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
}

project(':gralog-computation-tree-logic') {
  dependencies {
    gralog project(':gralog-core')
    gralog project(':gralog-modal-logic')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
}

project(':gralog-finite-game') {
  dependencies {
    gralog project(':gralog-core')
  }
}

project(':gralog-first-order-logic') {
  dependencies {
    gralog project(':gralog-fx')
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  task parser(type: CupJFlex) {
    workingDir = 'gralog/firstorderlogic/logic/firstorder/parser'
    baseName = 'FirstOrder'
  }
  jar.dependsOn(parser)
}

project(':gralog-modal-logic') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
}

project(':gralog-modal-mu-calculus') {
  dependencies {
    gralog project(':gralog-core')
    gralog project(':gralog-finite-game')
    gralog project(':gralog-modal-logic')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
}

project(':gralog-np-completeness') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
}

project(':JGraphTBridge') {
  dependencies {
    gralog project(':gralog-core')
    compile 'org.jgrapht:jgrapht-core:0.9.2'
  }
}

// Let the subproject jars explicitly depend on their dependencies.
subprojects {
  jar {
    manifest {
      attributes 'Class-Path':
        (configurations.runtime - configurations.gralog).files.collect {
          it.getName() }.join(' ')
    }
  }
}

// Copy the true (not gralog-internal) dependencies of subprojects
// into the root build/libs dir.
subprojects {
  task collectJars(type: Copy, dependsOn: jar) {
    from ((configurations.runtime - configurations.gralog).files)
    into rootProject.file('build/libs')
  }
}

// Collect all subproject jars and the central config file.
task copySubprojects(type: Copy, dependsOn: subprojects.collectJars) {
  from (subprojects.buildDir.collect { it.toString() + '/libs' })
  from rootProject.file('gralog-fx/src/main/java/gralog/gralogfx/config.xml')
  into new File(rootProject.buildDir, 'libs')
}

// We need to start gralog as a jar because it uses some crazy
// reflection.
task run(dependsOn:copySubprojects, overwrite: true) << {
  javaexec { main='-jar'; args 'build/libs/gralog-fx.jar' }
}

// Copy subproject test reports to the root so that netbeans (and
// maybe other tools) can find them.
subprojects {
  task copyReport(type: Copy) {
    from project.file('build/test-results')
    into new File(rootProject.buildDir, 'test-results')
  }
  test.finalizedBy(copyReport)
}

test.dependsOn(subprojects.test)

class CupJFlex extends DefaultTask {
    String workingDir
    String baseName;

    @TaskAction
    def runCupJFlex() {
      def parserFile = baseName + 'Parser'
      def scannerTokenFile = baseName + 'ScannerToken'
      def jflexFile = baseName + 'Scanner.jflex'
      ant.cup(
        srcfile: [ project.file('src/main/java'), workingDir, parserFile + '.cup' ].join('/'),
        destdir: project.file('src/main/java'),
        parser: parserFile,
        symbols: scannerTokenFile)
      ant.flex(file: [ project.file('src/main/java'), workingDir, jflexFile ].join('/'))
    }
}
