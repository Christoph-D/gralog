defaultTasks 'run'

subprojects {
  repositories { mavenCentral() }
  apply plugin: 'java'
}

task test
test.dependsOn(subprojects.test)

task clean
clean.dependsOn(subprojects.clean)

task run

subprojects {
  // All subprojects use junit and hamcrest for their tests.
  dependencies {
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
  }

  // Dependencies marked as "gralog" are considered to be internal and
  // will not be explicitly required (via classpath or linking) by the
  // jar files of the subprojects.  Every dependency must be properly
  // provided (via "compile") by exactly one project (usually
  // "gralog-fx").
  configurations {
    gralog
    compile.extendsFrom gralog
  }

  // Set up the parser/lexer generator.
  configurations {
    javaCup
    jflex
  }
  dependencies {
    javaCup 'com.github.vbmacher:java-cup:11b-20160615'
    jflex 'de.jflex:jflex:1.6.1'
  }
  ant.taskdef(
    classname: 'java_cup.anttask.CUPTask',
    name: 'cup', 
    classpath: configurations.javaCup.asPath)
  ant.taskdef(
    classname: 'jflex.anttask.JFlexTask',
    name: 'flex',
    classpath: configurations.jflex.asPath)

  project.ext.declareParserTasks = { params ->
    project.task('parser' + params.baseName, type: CupJFlex) {
      workingDir = params.workingDir
      baseName = params.baseName
    }
    project.task('parserClean' + params.baseName, type: Delete) {
      delete project.('parser' + params.baseName).generatedFiles()
    }
    project.clean.dependsOn('parserClean' + params.baseName)
    project.compileJava.dependsOn('parser' + params.baseName)
  }
}

project(':gralog-fx') {
  dependencies {
    compile project(':gralog-core')
    compile project(':gralog-finite-game')
  }
  // This subproject contains the main class.
  jar {
    manifest {
      attributes 'Main-Class': 'gralog.gralogfx.MainWindow'
    }
  }
}

// Configure the dependencies of the individual subprojects.  Rule:
// Use the "gralog" configuration for "gralog-" internal dependencies.
// Use the "compile" configuration for external dependencies.

project(':gralog-automaton') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
}

project(':gralog-computation-tree-logic') {
  dependencies {
    gralog project(':gralog-core')
    gralog project(':gralog-modal-logic')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/computationtreelogic/parser/',
    baseName: 'ComputationTreeLogic')
}

project(':gralog-finite-game') {
  dependencies {
    gralog project(':gralog-core')
  }
}

project(':gralog-first-order-logic') {
  dependencies {
    gralog project(':gralog-fx')
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/firstorderlogic/logic/firstorder/parser',
    baseName: 'FirstOrder')
}

project(':gralog-modal-logic') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/modallogic/parser',
    baseName: 'ModalLogic')
}

project(':gralog-modal-mu-calculus') {
  dependencies {
    gralog project(':gralog-core')
    gralog project(':gralog-finite-game')
    gralog project(':gralog-modal-logic')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/modalmucalculus/parser',
    baseName: 'ModalMuCalculus')
}

project(':gralog-np-completeness') {
  dependencies {
    gralog project(':gralog-core')
    compile 'com.github.vbmacher:java-cup-runtime:11b'
  }
  declareParserTasks(
    workingDir: 'gralog/npcompleteness/propositionallogic/parser/',
    baseName: 'PropositionalLogic')
}

project(':JGraphTBridge') {
  dependencies {
    gralog project(':gralog-core')
    compile 'org.jgrapht:jgrapht-core:0.9.2'
  }
}

// Let the subproject jars explicitly depend on their dependencies.
subprojects {
  jar {
    manifest {
      attributes 'Class-Path':
        (configurations.runtime - configurations.gralog).files.collect {
          it.getName() }.join(' ')
    }
  }
}

def distDir = 'dist'

// Copy the true (not gralog-internal) dependencies of subprojects
// into the root build/dist dir.
subprojects {
  task collectSubprojectDependencies(type: Copy, dependsOn: jar) {
    from ((configurations.runtime - configurations.gralog).files)
    into new File(rootProject.buildDir, distDir)
  }
}

// Collect all subproject jars and the central config file.
task copySubprojects(type: Copy) {
  dependsOn subprojects.collectSubprojectDependencies
  from (subprojects.buildDir.collect { new File(it, 'libs') })
  from rootProject.file('gralog-fx/src/main/java/gralog/gralogfx/config.xml')
  into new File(rootProject.buildDir, distDir)
}

task build
build.dependsOn(copySubprojects)

// We need to start gralog as a jar because it uses some crazy
// reflection.
run.dependsOn(copySubprojects)
run.doLast {
  javaexec {
    main = '-jar'
    args new File(rootProject.buildDir, distDir + '/gralog-fx.jar')
  }
}

// Copy subproject test reports to the root so that netbeans (and
// maybe other tools) can find them.
subprojects {
  task copyReport(type: Copy) {
    from new File(project.buildDir, 'test-results')
    into new File(rootProject.buildDir, 'test-results')
  }
  test.finalizedBy(copyReport)
}

// A custom task to generate a parser/lexer with cup/jflex.
class CupJFlex extends DefaultTask {
  String workingDir
  String baseName;

  def jflexFile() { baseName + 'Scanner.jflex' }
  def parserFile() { baseName + 'Parser' }
  def cupFile() { parserFile() + '.cup' }
  def scannerTokenFile() { baseName + 'ScannerToken' }

  // The list of generated files that will be deleted during "clean".
  def generatedFiles() {
    [ parserFile() + '.java',
      baseName + 'Scanner.java',
      baseName + 'Scanner.java~',
      scannerTokenFile() + '.java' ].collect {
      project.file('src/main/java' + '/' + workingDir + '/' + it)
    }
  }

  @TaskAction
  def runCupJFlex() {
    ant.cup(
      srcfile: [ project.file('src/main/java'), workingDir, cupFile() ].join('/'),
      destdir: project.file('src/main/java'),
      parser: parserFile(),
      symbols: scannerTokenFile())
    ant.flex(file: [ project.file('src/main/java'), workingDir, jflexFile() ].join('/'))
  }
}
