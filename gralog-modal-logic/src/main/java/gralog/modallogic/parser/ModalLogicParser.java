
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gralog.modallogic.parser;

import java_cup.runtime.*;
import gralog.algorithm.ParseError;
import gralog.modallogic.formula.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ModalLogicParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ModalLogicScannerToken.class;
}

  /** Default constructor. */
  @Deprecated
  public ModalLogicParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ModalLogicParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ModalLogicParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\006\000\002\005\004\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\024\004\017\006\005\010\014\011\004\012" +
    "\007\013\010\016\016\017\020\021\011\001\002\000\024" +
    "\004\017\006\005\010\014\011\004\012\007\013\010\016" +
    "\016\017\020\021\011\001\002\000\004\021\035\001\002" +
    "\000\010\002\ufffe\015\033\020\ufffe\001\002\000\012\002" +
    "\ufff9\014\ufff9\015\ufff9\020\ufff9\001\002\000\012\002\ufff8" +
    "\014\ufff8\015\ufff8\020\ufff8\001\002\000\012\002\ufffb\014" +
    "\ufffb\015\ufffb\020\ufffb\001\002\000\006\002\001\020\001" +
    "\001\002\000\004\002\032\001\002\000\024\004\017\006" +
    "\005\010\014\011\004\012\007\013\010\016\016\017\020" +
    "\021\011\001\002\000\012\002\ufffc\014\027\015\ufffc\020" +
    "\ufffc\001\002\000\024\004\017\006\005\010\014\011\004" +
    "\012\007\013\010\016\016\017\020\021\011\001\002\000" +
    "\004\021\023\001\002\000\024\004\017\006\005\010\014" +
    "\011\004\012\007\013\010\016\016\017\020\021\011\001" +
    "\002\000\004\020\022\001\002\000\012\002\ufffa\014\ufffa" +
    "\015\ufffa\020\ufffa\001\002\000\004\005\024\001\002\000" +
    "\024\004\017\006\005\010\014\011\004\012\007\013\010" +
    "\016\016\017\020\021\011\001\002\000\012\002\ufff5\014" +
    "\ufff5\015\ufff5\020\ufff5\001\002\000\012\002\ufff7\014\ufff7" +
    "\015\ufff7\020\ufff7\001\002\000\024\004\017\006\005\010" +
    "\014\011\004\012\007\013\010\016\016\017\020\021\011" +
    "\001\002\000\010\002\ufffd\015\ufffd\020\ufffd\001\002\000" +
    "\012\002\ufff6\014\ufff6\015\ufff6\020\ufff6\001\002\000\004" +
    "\002\000\001\002\000\024\004\017\006\005\010\014\011" +
    "\004\012\007\013\010\016\016\017\020\021\011\001\002" +
    "\000\006\002\uffff\020\uffff\001\002\000\004\007\036\001" +
    "\002\000\024\004\017\006\005\010\014\011\004\012\007" +
    "\013\010\016\016\017\020\021\011\001\002\000\012\002" +
    "\ufff3\014\ufff3\015\ufff3\020\ufff3\001\002\000\012\002\ufff4" +
    "\014\ufff4\015\ufff4\020\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\012\002\012\003\011\004\005\005\014\001" +
    "\001\000\004\005\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\030" +
    "\001\001\000\002\001\001\000\004\005\025\001\001\000" +
    "\002\001\001\000\012\002\020\003\011\004\005\005\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\027\005\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\033" +
    "\004\005\005\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\036\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ModalLogicParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ModalLogicParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ModalLogicParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    String errorMsg = null;
    private String inputString;

    public Boolean hasError()
    {
        return errorMsg == null;
    }
    
    public String getErrorMsg()
    {
        if(errorMsg == null)
            return "no error";
        else
            return errorMsg;
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void syntax_error(Symbol cur_token)
    {
        if(errorMsg == null)
            errorMsg = "Syntax Error: " + cur_token.toString();
    }

    @Override
    public void report_fatal_error(String message, Object info) throws ParseError
    {
        java_cup.runtime.ComplexSymbolFactory.ComplexSymbol symbol = (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)info;
        throw new ParseError("Unexpected " + symbol.getName(), inputString, symbol.xleft.getColumn());
    }

    static public ModalLogicFormula parseString(String str) throws Exception
    {
        ModalLogicParser parser = new ModalLogicParser(
                new ModalLogicScanner(new StringReader(str)),
                new java_cup.runtime.ComplexSymbolFactory());
        parser.inputString = str;
        Symbol parserresult = parser.parse();
        return (ModalLogicFormula) parserresult.value;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ModalLogicParser$actions {
  private final ModalLogicParser parser;

  /** Constructor */
  CUP$ModalLogicParser$actions(ModalLogicParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ModalLogicParser$do_action_part00000000(
    int                        CUP$ModalLogicParser$act_num,
    java_cup.runtime.lr_parser CUP$ModalLogicParser$parser,
    java.util.Stack            CUP$ModalLogicParser$stack,
    int                        CUP$ModalLogicParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ModalLogicParser$result;

      /* select the action based on the action number */
      switch (CUP$ModalLogicParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // formula ::= veeformula 
            {
              ModalLogicFormula RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= formula EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).xright;
		ModalLogicFormula start_val = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).value;
		RESULT = start_val;
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ModalLogicParser$parser.done_parsing();
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // veeformula ::= wedgeformula VEE veeformula 
            {
              ModalLogicFormula RESULT =null;
		Location leftxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).xleft;
		Location leftxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).xright;
		ModalLogicFormula left = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		Location rightxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location rightxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula right = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicOr(left, right); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("veeformula",1, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // veeformula ::= wedgeformula 
            {
              ModalLogicFormula RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("veeformula",1, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wedgeformula ::= atomicformula WEDGE wedgeformula 
            {
              ModalLogicFormula RESULT =null;
		Location leftxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).xleft;
		Location leftxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).xright;
		ModalLogicFormula left = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		Location rightxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location rightxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula right = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicAnd(left, right); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("wedgeformula",2, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wedgeformula ::= atomicformula 
            {
              ModalLogicFormula RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("wedgeformula",2, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atomicformula ::= STRING 
            {
              ModalLogicFormula RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicProposition(s); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atomicformula ::= PARENTHESISLEFT formula PARENTHESISRIGHT 
            {
              ModalLogicFormula RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)).value;
		 RESULT = f; 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atomicformula ::= BOT 
            {
              ModalLogicFormula RESULT =null;
		 RESULT = new ModalLogicBottom(); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atomicformula ::= TOP 
            {
              ModalLogicFormula RESULT =null;
		 RESULT = new ModalLogicTop(); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atomicformula ::= NEG atomicformula 
            {
              ModalLogicFormula RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicNot(f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atomicformula ::= DIAMOND atomicformula 
            {
              ModalLogicFormula RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicDiamond(f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atomicformula ::= LT STRING GT atomicformula 
            {
              ModalLogicFormula RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicDiamond(s, f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-3)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atomicformula ::= BOX atomicformula 
            {
              ModalLogicFormula RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicBox(f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-1)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atomicformula ::= BRACKETLEFT STRING BRACKETRIGHT atomicformula 
            {
              ModalLogicFormula RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-2)).value;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ModalLogicParser$stack.peek()).xright;
		ModalLogicFormula f = (ModalLogicFormula)((java_cup.runtime.Symbol) CUP$ModalLogicParser$stack.peek()).value;
		 RESULT = new ModalLogicBox(s, f); 
              CUP$ModalLogicParser$result = parser.getSymbolFactory().newSymbol("atomicformula",3, ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.elementAt(CUP$ModalLogicParser$top-3)), ((java_cup.runtime.Symbol)CUP$ModalLogicParser$stack.peek()), RESULT);
            }
          return CUP$ModalLogicParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ModalLogicParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ModalLogicParser$do_action(
    int                        CUP$ModalLogicParser$act_num,
    java_cup.runtime.lr_parser CUP$ModalLogicParser$parser,
    java.util.Stack            CUP$ModalLogicParser$stack,
    int                        CUP$ModalLogicParser$top)
    throws java.lang.Exception
    {
              return CUP$ModalLogicParser$do_action_part00000000(
                               CUP$ModalLogicParser$act_num,
                               CUP$ModalLogicParser$parser,
                               CUP$ModalLogicParser$stack,
                               CUP$ModalLogicParser$top);
    }
}

}
